syntax = "proto3";

option ruby_package = "Tucana::Shared";

package shared;

import "shared.struct.proto";
import "shared.translation.proto";

/*
    A data type is a custom implementation that could be compared to an object
    It could be as simple as a primitive but can be as complex as a structured object with rules
 */
message DataType {
  enum Variant {
    UNKNOWN = 0;
    PRIMITIVE = 1;
    TYPE = 2;
    OBJECT = 3;
    DATATYPE = 4;
    ARRAY = 5;
    ERROR = 6;
    NODE = 7;
  }

  // Variant of the data type
  Variant variant = 1;
  // Unique identifier of the data type
  string identifier = 2;
  repeated Translation name = 3;
  // Rules of the data type (e.g. Regex, contains...)
  repeated DataTypeRule rules = 4;
  // Optional identifier it the given data type is a child of another
  optional string parent_type_identifier = 5;
  // List of generic keys
  repeated string generic_keys = 6;
}

message DataTypeRule {
  oneof config {
    DataTypeContainsKeyRuleConfig contains_key = 1;
    DataTypeContainsTypeRuleConfig contains_type = 2;
    DataTypeItemOfCollectionRuleConfig item_of_collection = 3;
    DataTypeNumberRangeRuleConfig number_range = 4;
    DataTypeRegexRuleConfig regex = 5;
    DataTypeInputTypesRuleConfig input_types = 6;
    DataTypeReturnTypeRuleConfig return_type = 7;
  }
}

// Rule to check that the given key is contained in the given object
message DataTypeContainsKeyRuleConfig {
  string key = 1;
  DataTypeIdentifier data_type_identifier = 2;
}

// Rule to check that the given type is contained in the given array
message DataTypeContainsTypeRuleConfig {
  DataTypeIdentifier data_type_identifier = 1;
}

// Rule to check that the given item is contained inside the array of items
message DataTypeItemOfCollectionRuleConfig {
    repeated shared.Value items = 1;
}

// Rule to check that the given number is contained inside the range of numbers
message DataTypeNumberRangeRuleConfig {
    int64 from = 1;
    int64 to = 2;
    optional int64 steps = 3;
}

// Rule to check that the given string matches the given regex pattern
message DataTypeRegexRuleConfig {
    string pattern = 1;
}

message DataTypeInputTypesRuleConfig {
  message DataTypeInputType {
    DataTypeIdentifier data_type_identifier = 1;
    string input_identifier = 2;
  }

  repeated DataTypeInputType input_types = 1;
}

message DataTypeReturnTypeRuleConfig {
  DataTypeIdentifier data_type_identifier = 1;
}

message DataTypeIdentifier {
  oneof type {
    // Points to a data type without generic keys
    string data_type_identifier = 1;
    // Points to a data type with generic keys
    GenericType generic_type = 2;
    // Points to a generic key in the current function
    string generic_key = 3;
  }
}

message GenericType {
  // References a data type by its identifier
  string data_type_identifier = 1;
  repeated GenericMapper generic_mappers = 2;
}

// target get mapped to source
message GenericMapper {
  // can point to another generic or to a resolved data type
  // Assigns source to this source
  DataTypeIdentifier source = 1;
  // can only be a generic key for example: 'T', 'V'
  string target = 2;
}
