syntax = "proto3";

option ruby_package = "Tucana::Shared";

package shared;

import "shared.struct.proto";
import "shared.translation.proto";

/*
    A data type is a custom implementation that could be compared to an object
    It could be as simple as a primitive but can be as complex as a structured object with rules
 */
message DefinitionDataType {
  enum Variant {
    UNKNOWN = 0;
    PRIMITIVE = 1;
    TYPE = 2;
    OBJECT = 3;
    DATATYPE = 4;
    ARRAY = 5;
    ERROR = 6;
    NODE = 7;
  }

  // Variant of the data type
  Variant variant = 1;
  // Unique identifier of the data type
  string identifier = 2;
  repeated Translation name = 3;
  // Rules of the data type (e.g. Regex, contains...)
  repeated DefinitionDataTypeRule rules = 4;
  // List of generic keys
  repeated string generic_keys = 5;
}

message ExecutionDataType {
  // Unique identifier of the data type
  string identifier = 1;
  // Rules of the data type (e.g. Regex, contains...)
  repeated ExecutionDataTypeRule rules = 2;
}

message DefinitionDataTypeRule {
  oneof config {
    DefinitionDataTypeContainsKeyRuleConfig contains_key = 1;
    DefinitionDataTypeContainsTypeRuleConfig contains_type = 2;
    DataTypeItemOfCollectionRuleConfig item_of_collection = 3;
    DataTypeNumberRangeRuleConfig number_range = 4;
    DataTypeRegexRuleConfig regex = 5;
    DefinitionDataTypeInputTypesRuleConfig input_types = 6;
    DefinitionDataTypeReturnTypeRuleConfig return_type = 7;
    DefinitionDataTypeParentTypeRuleConfig parent_type = 8;
  }
}

message ExecutionDataTypeRule {
  oneof config {
    ExecutionDataTypeContainsKeyRuleConfig contains_key = 1;
    ExecutionDataTypeContainsTypeRuleConfig contains_type = 2;
    DataTypeItemOfCollectionRuleConfig item_of_collection = 3;
    DataTypeNumberRangeRuleConfig number_range = 4;
    DataTypeRegexRuleConfig regex = 5;
    ExecutionDataTypeParentTypeRuleConfig parent_type = 6;
  }
}

// Rule for defining the data type parent type
message DefinitionDataTypeParentTypeRuleConfig {
    DataTypeIdentifier parent_type = 1;
}

message ExecutionDataTypeParentTypeRuleConfig {
    string parent_type = 1;
}

// Rule to check that the given key is contained in the given object
message DefinitionDataTypeContainsKeyRuleConfig {
  string key = 1;
  DataTypeIdentifier data_type_identifier = 2;
}

message ExecutionDataTypeContainsKeyRuleConfig {
  string key = 1;
  string data_type_identifier = 2;
}

// Rule to check that the given type is contained in the given array
message DefinitionDataTypeContainsTypeRuleConfig {
  DataTypeIdentifier data_type_identifier = 1;
}

message ExecutionDataTypeContainsTypeRuleConfig {
  string data_type_identifier = 1;
}

// Rule to check that the given item is contained inside the array of items
message DataTypeItemOfCollectionRuleConfig {
    repeated shared.Value items = 1;
}

// Rule to check that the given number is contained inside the range of numbers
message DataTypeNumberRangeRuleConfig {
    int64 from = 1;
    int64 to = 2;
    optional int64 steps = 3;
}

// Rule to check that the given string matches the given regex pattern
message DataTypeRegexRuleConfig {
    string pattern = 1;
}

message DefinitionDataTypeInputTypesRuleConfig {
  message DataTypeInputType {
    DataTypeIdentifier data_type_identifier = 1;
    string input_identifier = 2;
  }

  repeated DataTypeInputType input_types = 1;
}

message DefinitionDataTypeReturnTypeRuleConfig {
  DataTypeIdentifier data_type_identifier = 1;
}

message DataTypeIdentifier {
  oneof type {
    // Points to a data type without generic keys
    string data_type_identifier = 1;
    // Points to a data type with generic keys
    GenericType generic_type = 2;
    // Points to a generic key in the current function
    string generic_key = 3;
  }
}

message GenericType {
  // References a data type by its identifier
  string data_type_identifier = 1;
  repeated GenericMapper generic_mappers = 2;
}

// target get mapped to source
message GenericMapper {
  // Strategy to combine generic keys
  enum GenericCombinationStrategy {
    UNKNOWN = 0;
    AND = 1;
    OR = 2;
  }

  // can point to another generic or to a resolved data type
  // Assigns source to this source
  repeated DataTypeIdentifier source = 1;
  // can only be a generic key for example: 'T', 'V'
  string target = 2;

  repeated GenericCombinationStrategy generic_combinations = 3;
}
