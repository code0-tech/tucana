syntax = "proto3";

option ruby_package = "Tucana::Aquila";

package aquila;

import "shared.struct.proto";
import "shared.runtime_function.proto";
import "shared.datatype.proto";
import "shared.translation.proto";
import "shared.event.proto";

// Event that gets admitted by an action
message Event {
  // Id of Event type
  string event_type = 1;
  // Payload (JSON) of event params
  shared.Value payload = 2;
}

// Action flow/event configuration
message Configuration {
  // Action identifier
  string identifier = 1;
  // Flow Configuration
  repeated shared.RuntimeFunctionDefinition function_definitions = 2;
  // Event Configuration
  repeated shared.EventType event_types = 3;
  // Application Configuration
  repeated ActionConfiguration action_configurations = 4;
}

message ActionConfiguration {
  repeated shared.Translation name = 1;
  repeated shared.Translation description = 2;
  shared.DataType type = 3;
  optional shared.Value default_value = 4;
}

// Request to execute a request a flow
message ExecutionRequest {
  // Execution identifier of execution
  string execution_identifier = 1;
  // Function identifier of flow to execute
  string function_identifier = 2;
  // Parameters (JSON) of flow required to execute
  shared.Struct parameters = 3;
}

// Result from executed flows by an action
message ExecutionResult {
  // Identifier of flow to execute
  string execution_identifier = 1;
  // Result of executed flow
  shared.Value result = 2;
}

message TransferRequest {
  oneof data {
    // Configuration of action that will be send to sagittarius
    //
    // Expected behavior:
    // Aquila will abort if the first request is not a configuration
    Configuration configuration = 1;
    // Event that got admitted
    Event event = 2;
    // Result of execution that was triggered by a execution request
    ExecutionResult result = 3;
  }
}

message TransferResponse {
  // Execution request
  ExecutionRequest execution = 1;
}

service ActionTransferService {
  // This behavior achieves a bi-directional stream so that both services aren't required to be a server & client on their own
  rpc Transfer (stream TransferRequest) returns (stream TransferResponse);
}