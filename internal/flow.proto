syntax = "proto3";

option ruby_package = "Tucana::Internal";

package internal;

import "node.proto";
import "type.proto";
import "variable.proto";

message Flow {
  int64 flow_id = 1;
  Node starting_node = 2;
  repeated Type types = 3;
  repeated Variable context = 4;
  int64 last_updated = 5;
}

enum FlowCommandType {
  INSERT = 0;
  DELETE = 1;
}

//Sagittarius sends flow to be updated
message FlowRequest {
  Flow updated_flow = 1;
  FlowCommandType type = 2;
}

//Aquila response with success or failure
message FlowResponse {
  bool success = 1;
}

//All ids of flows that Aquila holds
message FlowGetRequest {
  repeated int64 flow_ids = 1;
}

//Sagittarius checks if he holds the flow_ids that Aquila sent
//If id is present --> sends flow
//If id is not present --> returns id to be deleted
message FlowGetResponse {
  repeated Flow updated_flows = 1;
  repeated int64 deleted_flow_ids = 2;
}

service FlowAquilaService {
  rpc Update (stream FlowRequest) returns (stream FlowResponse) {}
}

service FlowSagittariusService {
  rpc Get (FlowGetRequest) returns (FlowGetResponse) {}
}