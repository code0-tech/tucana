syntax = "proto3";

option ruby_package = "Tucana::Internal";

package internal;

import "node.proto";
import "type.proto";
import "variable.proto";

message Flow {
  int64 flow_id = 1;
  Node starting_node = 2;
  repeated Type types = 3;
  repeated Variable context = 4;
  int64 last_updated = 5;
}

//Sagittarius sends flow to be updated
message FlowUpdateRequest {
  Flow updated_flow = 1;
}

//Aquila response with success or retry of update
message FlowUpdateResponse {
  bool success = 1;
}

//Sagittarius sends flow_id to be updated
message FlowDeleteRequest {
  int64 flow_id = 1;
}

//Aquila response with success or retry of deletion
message FlowDeleteResponse {
  bool success = 1;
}

//All ids of flows that Aquila holds
message FlowGetRequest {
  repeated int64 flow_ids = 1;
}

//Sagittarius checks if he holds the flow_ids that Aquila sent
//If id is present --> sends flow
//If id is not present --> returns id to be deleted
message FlowGetResponse {
  repeated Flow updated_flows = 1;
  repeated int64 deleted_flow_ids = 2;
}

service FlowAquilaService {
  rpc Update (FlowUpdateRequest) returns (FlowUpdateResponse) {}
  rpc Delete (FlowDeleteRequest) returns (FlowDeleteResponse) {}
}

service FlowSagittariusService {
  rpc Get (FlowGetRequest) returns (FlowGetResponse) {}
}